#!/usr/bin/env node

/**
 * Module dependencies.
 */
import { debug } from "debug";
import http from 'http';
import { BitlyClient, Logger } from "../library";
import { bitlyToken as token } from "../config";
import app from '../app';
import path from "path";

const expressDebug = debug('express-app:server');

//Bitly General Token for API v3
const bitlyClientAPI = new BitlyClient(token);

//Request Logger
const requestLogger = new Logger(path.join(__dirname, "../tmp/"), "request.log");

//express app instance
const expressApp = app({ bitlyClientAPI, requestLogger });

//http port
const port = normalizePort(process.env.PORT || '3000');

/**
 * Get port from environment and store in Express.
 */
expressApp.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(expressApp);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  console.log(`App listening on ${bind}!`)

  expressDebug('Listening on ' + bind);
}
